// ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Æ‡∏≤‡∏ü‡∏ü‡∏π‡πà‡∏ß
/*üîπ Shared Memory ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
* **Shared Memory (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô)** ‡∏Ñ‡∏∑‡∏≠ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ (RAM) ‡∏ó‡∏µ‡πà **‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ process ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ** ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
* ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏à‡∏∞ map ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô shared_mem.dat ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timestamp 
* ‡πÉ‡∏ä‡πâ polling ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
* ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö **‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ (IPC = Inter-Process Communication)** ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå, socket ‡∏´‡∏£‡∏∑‡∏≠ pipe
* **‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î** ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏î‡∏≤ IPC methods ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ process ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á ‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠ buffer ‡∏õ‡∏Å‡∏ï‡∏¥
---
## üîπ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Java (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ)
‡πÉ‡∏ô Java ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ **`MappedByteBuffer` + `FileChannel` + `RandomAccessFile`**
* `RandomAccessFile raf = new RandomAccessFile(SHARED_FILE, "rw");`
  üëâ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á (`heartbeat_shared.dat`) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô

* `FileChannel channel = raf.getChannel();`
  üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á (Channel) ‡πÄ‡∏û‡∏∑‡πà‡∏≠ map ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö memory

* `MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);`
  üëâ **map ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö RAM** (shared memory) ‚Üí ‡∏ó‡∏∏‡∏Å process ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô + map ‡∏î‡πâ‡∏ß‡∏¢ offset/size ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

---
## üîπ ‡∏Å‡∏•‡πÑ‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
1. **Process 1** ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô `"PID:1 alive <timestamp>"` ‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà offset ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

   ```java
   buffer.position(pid * REGION_SIZE);
   buffer.put(data);
   ```

   ‚Üí ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå + RAM ‡∏ï‡∏£‡∏á slot ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° heartbeat ‡∏Ç‡∏≠‡∏á process 1

2. **Process 2** ‡∏≠‡πà‡∏≤‡∏ô offset ‡∏Ç‡∏≠‡∏á Process 1

   ```java
   buffer.position(1 * REGION_SIZE); // slot ‡∏Ç‡∏≠‡∏á PID 1
   buffer.get(readBytes);
   ```

   ‚Üí ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° heartbeat ‡∏Ç‡∏≠‡∏á Process 1 ‡πÅ‡∏ö‡∏ö **real-time**

3. **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:** process ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ "‡πÄ‡∏´‡πá‡∏ô" ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô shared memory ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á message ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î socket

---

## üîπ ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ `REGION_SIZE`

* Shared memory ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô **slot** ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ process
* ‡πÄ‡∏ä‡πà‡∏ô `REGION_SIZE = 128` ‚Üí process 1 ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà offset 128, process 2 ‡∏ó‡∏µ‡πà offset 256, ‚Ä¶
* ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô (‡πÅ‡∏ï‡πà‡∏•‡∏∞ process ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)

---

## üîπ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á Shared Memory

* ‚úÖ ‡πÄ‡∏£‡πá‡∏ß (direct access to RAM, ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á copy ‡πÑ‡∏õ-‡∏°‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô socket ‡∏´‡∏£‡∏∑‡∏≠ pipe)
* ‚úÖ ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á ‡πÜ ‚Üí data structure ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
* ‚úÖ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• heartbeat ‡∏´‡∏£‡∏∑‡∏≠ state ‡πÅ‡∏ö‡∏ö real-time
* ‚úÖ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™ ‡∏≤‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (Single Machine)

---

## üîπ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢

* ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ **synchronization** ‡πÄ‡∏≠‡∏á (‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏¢‡∏°‡∏µ `synchronized(buffer)`)
* ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ built-in mechanism ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£ ‚Üí programmer ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö slot, offset ‡πÄ‡∏≠‡∏á
* ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤ process ‡∏ï‡∏≤‡∏¢ ‚Üí ‡∏≠‡∏≤‡∏à‡πÄ‡∏´‡∏•‡∏∑‡∏≠ data ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡∏ß‡πà‡∏≤ process ‡∏¢‡∏±‡∏á alive

---

üëâ ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:

* **Process ‡∏•‡∏π‡∏Å** ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô heartbeat ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡∏á shared memory slot
* **Boss** (process ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô shared memory ‡∏Ç‡∏≠‡∏á process ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (lastHeartbeat < TIMEOUT)
* **Launcher** ‡∏Å‡πá‡∏≠‡πà‡∏≤‡∏ô slot 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠ Boss ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

---
*/

import java.io.IOException;
/*‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô I/O (Input/Output) ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠, ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô try { ... } catch (IOException e) ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå shared memory
‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ catch error ‡∏Ç‡∏≠‡∏á I/O ‡πÑ‡∏î‡πâ */

import java.io.RandomAccessFile;
/*‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (random access)
‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå heartbeat_shared.dat ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shared memory ‡∏•‡∏á‡πÑ‡∏õ
‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ map ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ */
/*
* ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ RandomAccessFile
* ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô shared memory ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á byte ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏á ‡πÜ ‡πÑ‡∏î‡πâ (seek(position))
* ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö map memory ‡∏ú‡πà‡∏≤‡∏ô FileChannel ‚Üí ‡πÉ‡∏ä‡πâ raf.getChannel().map(...)
* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏≤‡∏¢ process ‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö stream ‡∏õ‡∏Å‡∏ï‡∏¥
* üîπ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
* ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏≤‡∏á ‚Üí process ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
* ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö memory-mapped I/O ‚Üí ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å map ‡πÄ‡∏õ‡πá‡∏ô memory (MappedByteBuffer)
* ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡πà‡∏≤‡∏ô‚Äì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÅ‡∏ï‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å process
* ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
* ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ ‚Üí ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô heartbeat ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ process ‡∏•‡∏á offset
* ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà fix ‡πÑ‡∏ß‡πâ (‡πÄ‡∏ä‡πà‡∏ô PID*REGION_SIZE) ‡∏ã‡∏∂‡πà‡∏á stream ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
*/
import java.nio.MappedByteBuffer;
/*‡πÄ‡∏õ‡πá‡∏ô buffer ‡∏ó‡∏µ‡πà map ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ ‚Üí ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏≤‡∏¢ process ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö memory
‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô "shared memory" ‡πÉ‡∏´‡πâ process ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏≠‡πà‡∏≤‡∏ô heartbeat
‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô core ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á process */

import java.nio.channels.FileChannel;
/*‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏±‡∏ö NIO (New I/O)
‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ raf.getChannel() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ map ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà MappedByteBuffer
‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞ map ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ memory ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ */

import java.nio.charset.StandardCharsets;
/*‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î charset (‡∏ä‡∏∏‡∏î‡∏≠‡∏±‡∏Å‡∏©‡∏£) ‡πÄ‡∏ä‡πà‡∏ô UTF-8
‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° heartbeat ‚Üí
msg.getBytes(StandardCharsets.UTF_8) ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô Byte array 
‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏≠ "PID:2 alive" ‡∏à‡∏∞‡πÑ‡∏î‡πâ [80, 73, 68, 58, 50, 32, 97, 108, 105, 118, 101]
‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° encode/ decode ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏≠‡∏≤‡∏à‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô) */

import java.util.ArrayList;
/* ‡∏Ñ‡∏•‡∏≤‡∏™ List ‡πÅ‡∏ö‡∏ö dynamic (‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏î‡πâ)
‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö worker threads ‡πÅ‡∏•‡πâ‡∏ß join ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
‚ùó‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÉ‡∏ä‡πâ ArrayList ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)*/

import java.util.List;
/*‡πÄ‡∏õ‡πá‡∏ô interface ‡∏Ç‡∏≠‡∏á collection ‡πÅ‡∏ö‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö (List)
ArrayList implement ‡∏°‡∏≤‡∏à‡∏≤‡∏Å List ‚Üí ‡πÉ‡∏ä‡πâ List<Thread> workers = new ArrayList<>();
‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ö‡∏ö generic */

import java.util.Set;
/*collection ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô membership ‡∏Ç‡∏≠‡∏á process
‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö process IDs ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á alive ‡∏≠‡∏¢‡∏π‡πà
‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ membership ‡∏ï‡πâ‡∏≠‡∏á unique (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ pid ‡∏ã‡πâ‡∏≥) */

import java.util.concurrent.ConcurrentHashMap;
/*‡πÄ‡∏õ‡πá‡∏ô thread-safe HashMap ‚Üí ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢ thread ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á lock ‡πÄ‡∏≠‡∏á
‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á membership set ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å concurrent access:
static final Set<Integer> membership = ConcurrentHashMap.newKeySet();
‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ thread (Sender, Listener, FailureDetector) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà thread-safe ‡∏à‡∏∞‡∏û‡∏±‡∏á‡πÑ‡∏î‡πâ 
Concurrency: ConcurrentHashMap ‚Üí ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏≤‡∏¢ thread ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô*/

public class DistributedProcessMain {

    public static final int NUM_PROCESSES = 3;
    /*
     * ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô process ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
     * ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ loop ‡πÄ‡∏ä‡πà‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á process, ‡∏™‡πÅ‡∏Å‡∏ô membership
     * final ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     * ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ fix ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 3 (‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ç‡∏¢‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πá‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ)
     */
    public static final int REGION_SIZE = 128;
    /*
     * ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á memory slot (‡πÄ‡∏õ‡πá‡∏ô byte) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö process ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
     * ‡πÄ‡∏ä‡πà‡∏ô Process 1 ‡∏à‡∏∞‡πÉ‡∏ä‡πâ slot [128..255], Process 2 [256..383], ...
     * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° heartbeat ‡πÄ‡∏ä‡πà‡∏ô "PID:2 alive 1705900000000"
     * ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î
     */
    public static final String SHARED_FILE = "heartbeat_shared.dat";
    /*
     * ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô shared memory
     * ‡∏ó‡∏∏‡∏Å process ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß map ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏î‡πâ‡∏ß‡∏¢ MappedByteBuffer
     * ‡∏ó‡∏≥‡πÉ‡∏´‡πâ process ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô heartbeat ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡πà‡∏≤‡∏ô)
     */
    public static final long TIMEOUT = 20000; // 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    /*
     * ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ß‡πà‡∏≤ process ‚Äú‡∏ï‡∏≤‡∏¢‚Äù ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     * ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á heartbeat ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î > 20,000 ms ‚Üí process ‡∏ï‡∏≤‡∏¢
     * Boss ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö membership
     */

    // ---------- Shared State ---------- (‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö distributed)
    /*
     * ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà
     * Boss ‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (bossPid)
     * ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á heartbeat ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å process (lastHeartbeat)
     * ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á process (contactCounts)
     * process ‡πÑ‡∏´‡∏ô‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß (dead)
     * ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ process ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á Alive (membership)
     */
    static class SystemState {
        static volatile int bossPid = -1;
        /*
         * ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤ process ‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô Boss ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
         * volatile ‚Üí ‡∏ó‡∏≥‡πÉ‡∏´‡πâ thread ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà cache ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤)
         * ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô -1 = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Boss
         */
        static final long[] lastHeartbeat = new long[NUM_PROCESSES + 1];
        /*
         * Array ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö timestamp (ms) ‡∏Ç‡∏≠‡∏á heartbeat ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ process
         * index = PID ‚Üí ‡πÄ‡∏ä‡πà‡∏ô lastHeartbeat[2] = 1705900000000
         * ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ process ‡∏¢‡∏±‡∏á Alive ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
         * +1 ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ index ‡πÉ‡∏´‡πâ process ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1 (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ index 0)
         */
        static final int[][] contactCounts = new int[NUM_PROCESSES + 1][NUM_PROCESSES + 1];
        /*
         * Matrix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤ process ‡πÑ‡∏´‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö process ‡πÑ‡∏´‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á
         * ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Boss ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å process ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
         * ‡πÄ‡∏ä‡πà‡∏ô contactCounts[2][3] = 15 ‚Üí ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á process 2 ‡πÄ‡∏´‡πá‡∏ô heartbeat ‡∏Ç‡∏≠‡∏á process
         * 3 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 15 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
         */
        static final boolean[] dead = new boolean[NUM_PROCESSES + 1];
        /*
         * Array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤ process ‡πÑ‡∏´‡∏ô ‡∏ñ‡∏π‡∏Å mark ‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
         * ‡πÄ‡∏ä‡πà‡∏ô dead[1] = true ‚Üí PID 1 ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å Boss mark ‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏¢
         * ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö timeout ‚Üí ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà revive (‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà revive)
         */
        static final Set<Integer> membership = ConcurrentHashMap.newKeySet();
        /*
         * ‡πÄ‡∏õ‡πá‡∏ô Set ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ process ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á Alive ‡∏≠‡∏¢‡∏π‡πà
         * ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ Boss ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (Boss ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï membership ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
         * ‡πÉ‡∏ä‡πâ ConcurrentHashMap.newKeySet() ‚Üí ‡πÑ‡∏î‡πâ set ‡∏ó‡∏µ‡πà thread-safe ‡πÉ‡∏ä‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢
         * thread ‡πÑ‡∏î‡πâ
         * 
         * ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ thread ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (Sender, Listener, FailureDetector, Worker)
         * membership ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ thread
         * ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ HashSet ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‚Üí ‡πÑ‡∏°‡πà thread-safe ‚Üí ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î
         * ConcurrentModificationException ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
         * crash)
         */
    }

    /*
     * main() ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á PID ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô argument ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     * ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å
     * ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á DistributedProcess ‡∏ï‡∏≤‡∏° PID ‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
     */
    public static void main(String[] args) {
        /*
         * args = argument ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô command line
         * ‡πÄ‡∏ä‡πà‡∏ô java DistributedProcessMain 2 ‚Üí args[0] = "2"
         */
        if (args.length < 1) {
            System.err.println("Usage: java DistributedProcessMain <pid>");
            System.exit(1);
        }
        /*
         * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á argument (PID) ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
         * ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á ‚Üí ‡∏û‡∏¥‡∏°‡∏û‡πå error ‡∏•‡∏á System.err (stderr) ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏á
         * ‡πÅ‡∏•‡πâ‡∏ß System.exit(1) = ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢ exit code 1 (‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á error)
         */

        int pid = Integer.parseInt(args[0]);
        /*
         * ‡πÅ‡∏õ‡∏•‡∏á argument ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å (args[0]) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç int
         * ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™ Process ID (pid)
         * ‡πÄ‡∏ä‡πà‡∏ô args[0] = "2" ‚Üí pid = 2
         */
        new DistributedProcess(pid).start();
        /*
         * ‡∏™‡∏£‡πâ‡∏≤‡∏á object DistributedProcess ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ pid ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
         * ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å .start() ‚Üí ‡∏ó‡∏≥‡πÉ‡∏´‡πâ process ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏™‡∏£‡πâ‡∏≤‡∏á thread sender,
         * listener, failure detector, worker)
         */
    }

    // ---------- DistributedProcess ----------
    /*
     * ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° shared memory
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Boss (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí fix Boss = 1)
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á thread:
     * ‡∏™‡πà‡∏á heartbeat
     * ‡∏ü‡∏±‡∏á heartbeat
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏¢ + ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å boss ‡πÉ‡∏´‡∏°‡πà
     * worker threads (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á)
     * ‡∏£‡∏≠ worker ‡∏à‡∏ö‡∏á‡∏≤‡∏ô ‚Üí ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
     */
    static class DistributedProcess {
        private final int pid;
        /*
         * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Process ID
         * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏à‡∏≤‡∏Å main(String[] args)
         * ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤ process ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£
         */
        private final MappedByteBuffer buffer;
        /*
         * buffer ‡∏ó‡∏µ‡πà map shared file (heartbeat_shared.dat)
         * ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô heartbeat ‡πÅ‡∏•‡∏∞ ‡∏≠‡πà‡∏≤‡∏ô heartbeat
         * MappedByteBuffer = ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© memory ‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å process ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
         */
        private static final int NUM_THREADS_PER_PROCESS = 3;
        /*
         * ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô worker thread ‡∏ó‡∏µ‡πà process ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
         * ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ fix ‡∏ó‡∏µ‡πà 3
         */

        DistributedProcess(int pid) {
            this.pid = pid;
            try {
                RandomAccessFile raf = new RandomAccessFile(SHARED_FILE, "rw");
                /*
                 * ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå heartbeat_shared.dat ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡πà‡∏≤‡∏ô+‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
                 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Java process ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô ‡∏™‡∏∑‡∏≠‡∏Å‡∏•‡∏≤‡∏á(backing file) ‡∏Ç‡∏≠‡∏á
                 * shared memory ‡∏ó‡∏µ‡πà process ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
                 * ‡∏ó‡∏∏‡∏Å process ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (heartbeat_shared.dat)
                 */

                long size = (long) (NUM_PROCESSES + 1) * REGION_SIZE;
                if (raf.length() < size)
                    raf.setLength(size);
                // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å process (slot 0 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Boss, slot 1..N
                // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö process)
                
                FileChannel channel = raf.getChannel(); // FileChannel = ‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå
                this.buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);
                /*
                 * raf.getChannel() ‚Üí ‡∏î‡∏∂‡∏á FileChannel ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                 * ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ map(...) ‚Üí ‡πÅ‡∏°‡πá‡∏û‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ (MappedByteBuffer)
                 * ‡∏ú‡∏•‡∏Ñ‡∏∑‡∏≠ process ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏Å‡πá‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
                 */
                channel.close();
                raf.close();
            } catch (IOException e) {
                throw new RuntimeException("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ map shared memory ‡πÑ‡∏î‡πâ", e);
            }
        }
        /*
         * DistributedProcess constructor ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?
         * ‡πÄ‡∏Å‡πá‡∏ö pid ‡∏Ç‡∏≠‡∏á process
         * ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå shared memory (heartbeat_shared.dat) ‡πÅ‡∏ö‡∏ö read-write
         * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå = (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô process + 1) √ó ‡∏Ç‡∏ô‡∏≤‡∏î slot
         * +1 ‚Üí ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ slot 0 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡πÄ‡∏ä‡πà‡∏ô boss)
         * Map ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ memory ‚Üí ‡πÑ‡∏î‡πâ MappedByteBuffer
         * ‡∏õ‡∏¥‡∏î file handle (raf, channel) ‚Üí ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ buffer ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô
         * 
         * ‡∏™‡∏£‡∏∏‡∏õ: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° shared memory ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö process ‡∏ô‡∏µ‡πâ
         */

        void start() {
            System.out.println("[Process " + pid + "] started."); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ process ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß

            int boss = readBossFromSharedMemory(buffer);
            if (boss == -1) {
                int chosen = 1; // fix bossPid = 1
                writeBossToSharedMemory(buffer, chosen);
                SystemState.bossPid = chosen;
                System.out.println("[INIT] Boss fixed to PID " + chosen);
            } else {
                SystemState.bossPid = boss;
                System.out.println("[Process " + pid + "] recognized Boss = PID " + boss);
            }
            /*
             * ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô slot 0 ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ boss ‚Üí fix ‡πÉ‡∏´‡πâ Boss = PID 1
             * ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí process ‡∏ô‡∏µ‡πâ‡∏à‡∏∞ ‚Äú‡∏à‡∏≥‚Äù ‡∏ß‡πà‡∏≤ boss ‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£
             * üëâ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô fix ‚Üí ‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‡∏ö‡∏≠‡∏™‡πÄ‡∏õ‡πá‡∏ô PID 1 ‡∏ï‡∏•‡∏≠‡∏î
             * (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å int chosen = 1; ‚Üí new
             * Random().nextInt(NUM_PROCESSES) + 1;)
             */

            Thread sender = new Thread(new HeartbeatSender(pid, buffer), "Sender-" + pid);
            Thread listener = new Thread(new HeartbeatListener(pid, buffer), "Listener-" + pid);
            Thread failureDetector = new Thread(new FailureDetector(pid, buffer), "FailureDetector-" + pid);

            sender.start();
            listener.start();
            failureDetector.start();
            /*
             * HeartbeatSender ‚Üí ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Äú‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‚Äù ‡∏•‡∏á shared memory
             * HeartbeatListener ‚Üí ‡∏≠‡πà‡∏≤‡∏ô heartbeat ‡∏Ç‡∏≠‡∏á process ‡∏≠‡∏∑‡πà‡∏ô
             * FailureDetector ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ process ‡πÑ‡∏´‡∏ô‡∏ï‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å boss ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
             */

            List<Thread> workers = new ArrayList<>();
            for (int tid = 1; tid <= NUM_THREADS_PER_PROCESS; tid++) {
                SimulatedThread worker = new SimulatedThread(pid, tid);
                Thread wt = new Thread(worker, "Worker-" + pid + "-" + tid);
                workers.add(wt);
                wt.start();
            }
            /*
             * ‡∏™‡∏£‡πâ‡∏≤‡∏á worker threads 3 ‡∏ï‡∏±‡∏ß (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô loop ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ ‚Äú‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ‚Ä¶‚Äù)
             * ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ç‡∏≠‡∏á process
             */
            for (Thread wt : workers) {
                try {
                    wt.join();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            /* join() = ‡πÉ‡∏´‡πâ process ‡∏´‡∏•‡∏±‡∏Å‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ worker ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏à‡∏∞‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */

            sender.interrupt();
            listener.interrupt();
            failureDetector.interrupt();
            /* ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å worker ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏´‡∏¢‡∏∏‡∏î sender, listener, failure detector */
        }
    }

    // ---------- Worker ----------
    /*
     * SimulatedThread = ‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô worker ‡∏Ç‡∏≠‡∏á process
     * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ (iteration 1, 2, 3, ‚Ä¶)
     * ‡∏û‡∏±‡∏Å‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô (0.5‚Äì1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
     * ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô interrupt()
     */
    static class SimulatedThread implements Runnable {
        private final int pid;
        private final int tid;
        /*
         * ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≥‡∏•‡∏≠‡∏á worker thread ‡∏Ç‡∏≠‡∏á process
         * ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£:
         * pid = ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç process ‡∏ó‡∏µ‡πà thread ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
         * tid = ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç thread ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô process
         */

        SimulatedThread(int pid, int tid) {
            this.pid = pid;
            this.tid = tid;
        }
        /*
         * constructor ‚Üí ‡∏£‡∏±‡∏ö pid ‡πÅ‡∏•‡∏∞ tid ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô object
         * ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤ process 2 ‡∏™‡∏£‡πâ‡∏≤‡∏á worker thread ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 1 ‚Üí pid = 2, tid = 1
         */

        @Override
        public void run() {
            for (int i = 1;; i++) {
                System.out.println("[Worker | Process " + pid + " - Thread " + tid + "] working (iteration " + i + ")"); // printlog‡∏ß‡πà‡∏≤worker‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ôiteration‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
                try {
                    Thread.sleep((long) (500 + Math.random() * 1000));
                    /*
                     * ‡πÉ‡∏´‡πâ thread ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å (sleep) ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
                     * ‡∏ô‡∏≤‡∏ô 0.5 ‡∏ñ‡∏∂‡∏á 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ß‡πà‡∏≤ worker ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                     */
                } catch (InterruptedException e) { // ‡∏ñ‡πâ‡∏≤ thread ‡∏ñ‡∏π‡∏Å interrupt ‡∏à‡∏∞ break ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    Thread.currentThread().interrupt();
                    break;
                }
            }
            System.out.println("[Worker | Process " + pid + " - Thread " + tid + "] finished.");
        }
    }

    // ---------- Heartbeat Sender ----------
    // HeartbeatSender = thread ‡∏ó‡∏µ‡πà process ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Äú‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‚Äù ‡∏•‡∏á‡πÉ‡∏ô shared
    // memory ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏° timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ process ‡∏≠‡∏∑‡πà‡∏ô (‡πÄ‡∏ä‡πà‡∏ô Boss)
    // ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏ï‡∏≤‡∏¢/‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏π‡πà
    static class HeartbeatSender implements Runnable {
        private final int pid;// pid = process id ‡∏Ç‡∏≠‡∏á process ‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3)
        private final MappedByteBuffer buffer; // buffer = ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà shared memory ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏∏‡∏Å process

        HeartbeatSender(int pid, MappedByteBuffer buffer) {
            this.pid = pid;
            this.buffer = buffer;
        } // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ pid ‡πÅ‡∏•‡∏∞ buffer ‡∏à‡∏≤‡∏Å process ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á object

        @Override
        public void run() {
            int offset = pid * REGION_SIZE; //‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô
            byte[] clearBytes = new byte[REGION_SIZE];
            /*
             * offset = ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô shared memory ‡∏ó‡∏µ‡πà process ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏õ
             * ‡πÄ‡∏ä‡πà‡∏ô pid=1 ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà slot 128, pid=2 ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà slot 256
             * clearBytes = byte array ‡∏Ç‡∏ô‡∏≤‡∏î 128 ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà)
             */

            while (!Thread.currentThread().isInterrupted()) { // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥ ‡πÜ ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÇ‡∏î‡∏ô‡∏™‡∏±‡πà‡∏á interrupt() ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
                String msg = "PID:" + pid + " alive " + System.currentTimeMillis();// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°heartbeat‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤process‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà(alive)‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡πÄ‡∏ß‡∏•‡∏≤timestamp‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                // System.currentTimeMillis() = ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏ö timestamp
                byte[] data = msg.getBytes(StandardCharsets.UTF_8);
                /*
                 * msg ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (string) ‡πÄ‡∏ä‡πà‡∏ô "PID:2 alive 1705900000000"
                 * .getBytes(StandardCharsets.UTF_8) ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô byte[]
                 * ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ MappedByteBuffer ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà byte ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string ‡∏ï‡∏£‡∏á ‡πÜ
                 */

                synchronized (buffer) {
                    buffer.position(offset);
                    buffer.put(clearBytes, 0, clearBytes.length);
                    buffer.position(offset);
                    buffer.put(data, 0, Math.min(data.length, REGION_SIZE));
                }
                /*
                 * ‡∏ó‡∏≥‡πÉ‡∏ô synchronized ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ thread ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏≠‡πà‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
                 * 2 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:
                 * ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô clearBytes (128 byte ‡∏ß‡πà‡∏≤‡∏á) ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
                 * ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà data
                 */

                SystemState.lastHeartbeat[pid] = System.currentTimeMillis(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà process
                                                                             // ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡πà‡∏áheartbeat‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                SystemState.dead[pid] = false;// ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ process ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≤‡∏¢ (dead=false)
                System.out.println("[PID " + pid + "] wrote heartbeat");// ‡∏™‡πà‡∏á heartbeat
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    break;
                }
                /*
                 * ‡∏™‡πà‡∏á heartbeat ‡∏ó‡∏∏‡∏Å ‡πÜ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                 * ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ô sleep ‡πÇ‡∏î‡∏ô interrupt ‚Üí ‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop (‡∏´‡∏¢‡∏∏‡∏î thread)
                 */
            }
        }
    }

    // ---------- Heartbeat Listener ----------
    /*
     * HeartbeatListener = thread ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π process ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÇ‡∏î‡∏¢:
     * ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å shared memory
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ heartbeat ‡∏Ç‡∏≠‡∏á process ‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏î) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤, ‡πÄ‡∏û‡∏¥‡πà‡∏° counter ‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ alive/dead
     * ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å console
     */
    static class HeartbeatListener implements Runnable {
        private final int pid;
        private final MappedByteBuffer buffer;
        /*
         * HeartbeatListener = thread ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏ü‡∏±‡∏á (‡∏≠‡πà‡∏≤‡∏ô) heartbeat ‡∏Ç‡∏≠‡∏á process
         * ‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏≤‡∏Å shared memory
         * pid = ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡∏≠‡∏á process ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
         * buffer = shared memory ‡∏ó‡∏µ‡πà process ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
         */

        HeartbeatListener(int pid, MappedByteBuffer buffer) {
            this.pid = pid;
            this.buffer = buffer;
        }// ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ pid ‡πÅ‡∏•‡∏∞ buffer ‡∏°‡∏≤‡∏à‡∏≤‡∏Å DistributedProcess ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

        @Override
        public void run() {
            byte[] readBytes = new byte[REGION_SIZE]; // readBytes = buffer ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏Ç‡∏ô‡∏≤‡∏î REGION_SIZE (128
                                                      // byte)‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• heartbeat ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
            while (!Thread.currentThread().isInterrupted()) { // loop ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å interrupt() ‡∏à‡∏≤‡∏Å process ‡∏´‡∏•‡∏±‡∏Å
                for (int otherPid = 1; otherPid <= NUM_PROCESSES; otherPid++) {
                    if (otherPid == pid)
                        continue;
                    int offset = otherPid * REGION_SIZE; //‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô
                    String msg;
                    synchronized (buffer) {
                        buffer.position(offset);
                        buffer.get(readBytes, 0, REGION_SIZE);
                        msg = new String(readBytes, StandardCharsets.UTF_8).trim();
                    }
                    /*
                     * ‡∏ß‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å process (1..NUM_PROCESSES) ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (if (otherPid == pid)
                     * continue;)
                     * offset = otherPid * REGION_SIZE ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô shared memory ‡∏ó‡∏µ‡πà process
                     * ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô heartbeat ‡πÑ‡∏ß‡πâ
                     * ‡πÉ‡∏ä‡πâ synchronized (buffer) ‚Üí ‡∏Å‡∏±‡∏ô race condition ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏≤‡∏¢ thread
                     * ‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
                     * ‡πÅ‡∏õ‡∏•‡∏á byte[] ‚Üí String ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° heartbeat
                     */

                    if (!msg.isEmpty()) {
                        long ts = parseHeartbeatTimestamp(msg);
                        if (ts > 0) {
                            long diff = System.currentTimeMillis() - ts;
                            if (diff <= TIMEOUT) { // heartbeat ‡∏¢‡∏±‡∏á fresh ‡∏≠‡∏¢‡∏π‡πà
                                SystemState.lastHeartbeat[otherPid] = ts;
                                SystemState.contactCounts[pid][otherPid]++;
                                SystemState.dead[otherPid] = false;
                                System.out.println(
                                        "[PID " + pid + "] saw heartbeat from " + otherPid + " (ts=" + ts + ")");
                            } else {
                                // heartbeat ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                                System.out.println("[PID " + pid + "] not saw heartbeat from "
                                        + otherPid + " (last ts=" + ts + ")");
                            }
                        }
                    }
                    /*
                     * ‡∏ñ‡πâ‡∏≤ msg ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏°‡∏µ heartbeat ‡∏≠‡∏¢‡∏π‡πà
                     * parseHeartbeatTimestamp(msg) ‚Üí ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ timestamp ‡∏ó‡∏µ‡πà process ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ
                     * (‡∏ï‡∏≠‡∏ô‡∏°‡∏±‡∏ô‡∏™‡πà‡∏á heartbeat)
                     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì diff = ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - timestamp
                     * ‡∏ñ‡πâ‡∏≤ diff <= TIMEOUT (20,000 ms) ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà
                     * update lastHeartbeat ‡∏Ç‡∏≠‡∏á process ‡∏ô‡∏±‡πâ‡∏ô
                     * ‡πÄ‡∏û‡∏¥‡πà‡∏° contactCounts (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà pid ‡∏ô‡∏µ‡πâ‡πÄ‡∏à‡∏≠ heartbeat ‡∏Ç‡∏≠‡∏á process ‡∏≠‡∏∑‡πà‡∏ô)
                     * mark ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≤‡∏¢ (dead=false)
                     * ‡∏ñ‡πâ‡∏≤ diff > TIMEOUT ‚Üí heartbeat ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏¢ (‡∏´‡∏£‡∏∑‡∏≠ disconnected)
                     */
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    break;
                }
                /*
                 * ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å process ‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô
                 * interrupt ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                 */
            }
        }
    }

    // ---------- Failure Detector + Boss Election ----------
    /*
     * FailureDetector = thread ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" (failure detection)
     * ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Boss Election (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÉ‡∏´‡∏°‡πà)
     *
     * ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
     * - ‡∏ñ‡πâ‡∏≤ process ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Boss ‚Üí ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö membership ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å process
     * ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏¢‡∏±‡∏á alive, ‡πÉ‡∏Ñ‡∏£ dead, ‡πÅ‡∏•‡πâ‡∏ß log ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
     * - ‡∏ñ‡πâ‡∏≤ process ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Boss ‚Üí ‡∏à‡∏∞‡∏Ñ‡∏≠‡∏¢ monitor ‡∏ß‡πà‡∏≤ Boss ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     * ‡∏ñ‡πâ‡∏≤ Boss ‡∏ï‡∏≤‡∏¢ ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Boss ‡πÉ‡∏´‡∏°‡πà
     *
     * ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°:
     * - startTime: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á process ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô false positive (Grace Period)
     * - GRACE_PERIOD: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ Boss ‡∏ï‡∏≤‡∏¢
     * - FORCE_BOSS1_PERIOD: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Boss = PID 1 ‡πÉ‡∏ô 15 ‡∏ß‡∏¥ ‡πÅ‡∏£‡∏Å
     * (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö)
     */
    static class FailureDetector implements Runnable {
        private final int pid; // ‡∏£‡∏´‡∏±‡∏™ process ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        private final MappedByteBuffer buffer; // shared memory ‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å process ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
        private final long startTime = System.currentTimeMillis(); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà process ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

        private static final long GRACE_PERIOD = 10000; // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å ‚Üí ‡πÑ‡∏°‡πà detect boss ‡∏ï‡∏≤‡∏¢
        private static final long FORCE_BOSS1_PERIOD = 15000; // 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å ‚Üí fix ‡πÉ‡∏´‡πâ boss = 1

        FailureDetector(int pid, MappedByteBuffer buffer) {
            this.pid = pid;
            this.buffer = buffer;
        } // constructor: ‡πÄ‡∏Å‡πá‡∏ö pid ‡πÅ‡∏•‡∏∞ buffer

        @Override
        public void run() {
            while (!Thread.currentThread().isInterrupted()) {
                // ‡∏≠‡πà‡∏≤‡∏ô boss ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å shared memory
                int currentBoss = readBossFromSharedMemory(buffer);
                SystemState.bossPid = currentBoss;

                if (currentBoss == pid) {
                    // ‡∏ñ‡πâ‡∏≤ process ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Boss
                    // ‚Üí ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à membership (‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£ alive / dead)
                    SystemState.membership.clear();
                    SystemState.membership.add(pid); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡∏á‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô

                    System.out.println("\n[Boss " + pid + "] Checking membership.");
                    for (int otherPid = 1; otherPid <= NUM_PROCESSES; otherPid++) {
                        if (otherPid == pid)
                            continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

                        long last = SystemState.lastHeartbeat[otherPid]; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ heartbeat ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á process ‡∏ô‡∏µ‡πâ
                        long diff = System.currentTimeMillis() - last; // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á heartbeat = ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - last

                        if (last > 0 && diff <= TIMEOUT) {
                            // case 1: ‡∏°‡∏µ heartbeat ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏™‡∏î‡∏≠‡∏¢‡∏π‡πà (<= 20 ‡∏ß‡∏¥)
                            if (!SystemState.dead[otherPid]) {
                                SystemState.membership.add(otherPid);
                                System.out.println("[Boss " + pid + "] PID " + otherPid + " ALIVE (" + diff + " ms)");
                            }
                        } else if (last > 0 && diff > TIMEOUT) {
                            // case 2: ‡∏°‡∏µ heartbeat ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ TIMEOUT ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ process ‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡∏≤‡∏¢
                            if (!SystemState.dead[otherPid]) {
                                SystemState.dead[otherPid] = true;
                                System.out.println("[Boss " + pid + "] PID " + otherPid + " DEAD (" + diff + " ms)");
                            } else {
                                System.out.println(
                                        "[Boss " + pid + "] PID " + otherPid + " still DEAD (" + diff + " ms)");
                            }
                        }
                    }
                    System.out.println("[Boss " + pid + "] Membership = " + SystemState.membership + "\n");

                } else {
                    // ‡∏ñ‡πâ‡∏≤ process ‡∏ô‡∏µ‡πâ "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Boss"
                    // ‚Üí ‡∏Ñ‡∏≠‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Boss ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
                    long ts = readHeartbeatTimestamp(buffer, currentBoss);
                    long age = (ts == 0 ? Long.MAX_VALUE : System.currentTimeMillis() - ts);

                    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô false detect ‚Üí ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Boss = 1 ‡πÉ‡∏ô 15 ‡∏ß‡∏¥ ‡πÅ‡∏£‡∏Å
                    if (System.currentTimeMillis() - startTime < FORCE_BOSS1_PERIOD) {
                        SystemState.bossPid = 1;
                        writeBossToSharedMemory(buffer, 1);
                    }
                    // ‡∏´‡∏•‡∏±‡∏á 15 ‡∏ß‡∏¥ ‡∏ñ‡πâ‡∏≤ Boss ‡∏ï‡∏≤‡∏¢ (heartbeat ‡πÄ‡∏Å‡∏¥‡∏ô TIMEOUT)
                    // ‡πÅ‡∏•‡∏∞‡∏ú‡πà‡∏≤‡∏ô Grace Period ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Boss ‡πÉ‡∏´‡∏°‡πà
                    else if (age > TIMEOUT && System.currentTimeMillis() - startTime > GRACE_PERIOD) {
                        System.out.println("[PID " + pid + "] Boss " + currentBoss + " died! Electing...");
                        int newBoss = electNewBoss();
                        writeBossToSharedMemory(buffer, newBoss);
                        SystemState.bossPid = newBoss;
                        System.out.println(
                                " ---------------- [Election Result] New Boss = PID " + newBoss + " ---------------- ");
                    }
                }

                try {
                    Thread.sleep(3000); // ‡∏ó‡∏∏‡∏Å ‡πÜ 3 ‡∏ß‡∏¥‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                } catch (InterruptedException e) {
                    break; // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô interrupt ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                }
            }
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Boss ‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å process ‡∏ó‡∏µ‡πà‡∏°‡∏µ contactCounts ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö
        // process ‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
        private int electNewBoss() {
            int maxContact = -1, chosen = -1;
            for (int i = 1; i <= NUM_PROCESSES; i++) {
                if (SystemState.dead[i])
                    continue; // ‡∏Ç‡πâ‡∏≤‡∏° process ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                int sum = 0;
                for (int j = 1; j <= NUM_PROCESSES; j++) {
                    sum += SystemState.contactCounts[i][j]; // ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà process i ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö process ‡∏≠‡∏∑‡πà‡∏ô
                }
                if (sum > maxContact) {
                    maxContact = sum;
                    chosen = i; // ‡πÄ‡∏à‡∏≠ candidate ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
                }
            }
            return chosen == -1 ? 1 : chosen; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‚Üí default ‡πÉ‡∏´‡πâ Boss=1
        }
    }

    // ---------- Utility ----------
    /*
     * ‡∏™‡πà‡∏ß‡∏ô Utility = ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
     * - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Boss ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÉ‡∏ô shared memory (slot 0)
     * - ‡∏≠‡πà‡∏≤‡∏ô Boss ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å shared memory (slot 0)
     * - ‡∏≠‡πà‡∏≤‡∏ô timestamp ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å heartbeat ‡∏Ç‡∏≠‡∏á process ‡πÉ‡∏î ‡πÜ
     * - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° heartbeat ‚Üí ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ timestamp ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
     *
     * ‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ synchronized(buffer) ‚Üí ‡∏Å‡∏±‡∏ô race condition
     * ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏•‡∏≤‡∏¢ thread/process ‡∏≠‡∏≤‡∏à‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô buffer ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
     */
    private static void writeBossToSharedMemory(MappedByteBuffer buffer, int bossPid) {
        synchronized (buffer) {
            // Boss ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á slot 0 ‡πÄ‡∏™‡∏°‡∏≠
            buffer.position(0);

            // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö Boss ‡πÄ‡∏ä‡πà‡∏ô "BOSS:2"
            String msg = "BOSS:" + bossPid;
            byte[] data = msg.getBytes(StandardCharsets.UTF_8);

            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á slot (‡πÉ‡∏™‡πà byte[] ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå)
            buffer.put(new byte[REGION_SIZE], 0, REGION_SIZE);

            // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "BOSS:x" ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
            buffer.position(0);
            buffer.put(data, 0, Math.min(data.length, REGION_SIZE));
        }
    }

    private static int readBossFromSharedMemory(MappedByteBuffer buffer) {
        byte[] readBytes = new byte[REGION_SIZE];
        synchronized (buffer) {
            // ‡∏≠‡πà‡∏≤‡∏ô slot 0 ‡∏Ç‡∏≠‡∏á shared memory
            buffer.position(0);
            buffer.get(readBytes, 0, REGION_SIZE);
        }

        // ‡πÅ‡∏õ‡∏•‡∏á byte[] ‚Üí String
        String msg = new String(readBytes, StandardCharsets.UTF_8).trim();

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "BOSS:" ‚Üí ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç PID ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        if (msg.startsWith("BOSS:")) {
            return Integer.parseInt(msg.split(":")[1]);
        }
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ boss ‚Üí return -1
        return -1;
    }

    private static long readHeartbeatTimestamp(MappedByteBuffer buffer, int pid) {
        byte[] arr = new byte[REGION_SIZE];
        synchronized (buffer) {
            // offset ‡∏Ç‡∏≠‡∏á process = pid * REGION_SIZE
            buffer.position(pid * REGION_SIZE);
            buffer.get(arr, 0, REGION_SIZE);
        }

        // ‡πÅ‡∏õ‡∏•‡∏á byte[] ‚Üí String
        String s = new String(arr, StandardCharsets.UTF_8).trim();

        // ‡∏î‡∏∂‡∏á timestamp ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° heartbeat
        return parseHeartbeatTimestamp(s);
    }

    private static long parseHeartbeatTimestamp(String msg) {
        // heartbeat format: "PID:x alive <timestamp>"
        // ‚Üí timestamp ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á space ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        int idx = msg.lastIndexOf(' ');

        if (idx > 0) {
            try {
                // substring ‡∏´‡∏•‡∏±‡∏á space ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô long
                return Long.parseLong(msg.substring(idx + 1));
            } catch (Exception ignore) {
                // ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Üí return 0
            }
        }
        return 0L;
    }

}
