import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class DistributedLauncher {

    public static final int REGION_SIZE = 128;
    public static final String SHARED_FILE = "heartbeat_shared.dat";
    public static final int NUM_PROCESSES = 3;

    public static void main(String[] args) {
        List<Process> processes = new ArrayList<>();

        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á process ‡∏•‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for (int pid = 1; pid <= NUM_PROCESSES; pid++) {
                File outFile = new File("p" + pid + ".log");

                ProcessBuilder pb = new ProcessBuilder(
                        "java", "-cp", "out", "DistributedProcessMain", String.valueOf(pid));

                pb.redirectOutput(outFile);
                pb.redirectError(outFile);

                Process proc = pb.start();
                processes.add(proc);

                System.out.println("Launched Process " + pid +
                        " (logs in " + outFile.getName() + ")");
            }

            // Thread monitor boss
            Thread monitor = new Thread(() -> {
                while (true) {
                    int boss = readBossFromSharedMemory();
                    if (boss == -1) {
                        System.out.println("[Launcher Monitor] Boss not elected yet.");
                    } else {
                        System.out.println("[Launcher Monitor] Current Boss = PID " + boss);
                    }
                    try {
                        Thread.sleep(10000);
                    } catch (InterruptedException e) {
                        break;
                    }
                }
            });
            monitor.setDaemon(true);
            monitor.start();

            // üéÆ ‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter to kill : killPid <pid> ");
            System.out.println("Type 'exit' to quit the launcher.");

            while (true) {
                System.out.print(">> ");
                String command = scanner.nextLine().trim();

                if (command.equalsIgnoreCase("exit")) {
                    System.out.println("killing all processes.");
                    for (Process p : processes) {
                        p.destroyForcibly();
                    }
                    break;

                } else if (command.startsWith("killPid")) {
                    String[] parts = command.split("\\s+");
                    if (parts.length == 2) {
                        try {
                            int targetPid = Integer.parseInt(parts[1]);
                            if (targetPid >= 1 && targetPid <= processes.size()) {
                                Process target = processes.get(targetPid - 1);
                                if (target.isAlive()) {
                                    target.destroyForcibly();
                                    System.out.println("Killed process PID=" + targetPid);
                                } else {
                                    System.out.println("Process " + targetPid + " is not running.");
                                }
                            } else {
                                System.out.println("PID out of range (1-" + processes.size() + ")");
                            }
                        } catch (NumberFormatException e) {
                            System.out.println("Invalid PID format.");
                        }
                    }
                } else {
                    System.out.println("Unknown command. Use: killPid <pid> or exit");
                }
            }

            // ‡∏£‡∏≠ process ‡∏•‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (optional ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞ block ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞ exit)
            for (Process p : processes) {
                if (p.isAlive()) {
                    p.waitFor();
                }
            }

            scanner.close();

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    // ‡∏≠‡πà‡∏≤‡∏ô Boss ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å shared memory
    private static int readBossFromSharedMemory() {
        try {
            RandomAccessFile raf = new RandomAccessFile(SHARED_FILE, "rw");
            FileChannel channel = raf.getChannel();
            MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, REGION_SIZE);
            byte[] readBytes = new byte[REGION_SIZE];
            buffer.position(0);
            buffer.get(readBytes, 0, REGION_SIZE);
            channel.close();
            raf.close();
            String msg = new String(readBytes, StandardCharsets.UTF_8).trim();
            if (msg.startsWith("BOSS:")) {
                return Integer.parseInt(msg.split(":")[1]);
            }
        } catch (Exception e) {
            // ignore, return -1
        }
        return -1;
    }

}
